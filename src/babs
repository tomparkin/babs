#!/bin/bash
#
# The Bash Build Server
#
readonly CARGS="hf:"
readonly EVENT_ID_SCAN_TREE="@@DO_TREE_SCAN"
readonly EVENT_ID_BUILD_REPORT_READY="@@REPORT_READY"
readonly EVENT_ID_PROCESS_BUILD_QUEUE="@@PROCESS_BUILD_QUEUE"

# Absolute paths
JOBRUNNER_PATH="/usr/local/bin/jobrunner"
CONFIG_FILE_PATH="/etc/babs/babs.ini"

# These are relative to $WORKDIR, and are set after config parsing
IN_FLIGHT_LOG="$(basename $0)-in-flight.txt"
LAST_BUILT_LOG="$(basename $0)-lastbuilt.txt"
EVENT_QUEUE="$(basename $0)-eventqueue.txt"
BUILD_QUEUE="$(basename $0)-buildqueue.txt"
REPORT_QUEUE="$(basename $0)-reportqueue.txt"
REPORT_STORE="reportstore"
BUILD_HISTORY="$(basename $0)-build-history.txt"

# Read in from the configuration file
MACHINE_POOL=
REMOTE_USER=
WORKDIR=
EMAIL_FROM=

# Arrays populated per config section
NUMBER_OF_BUILDS=0
declare -a BUILD_TITLE
declare -a CHECKOUT_METHOD
declare -a CHECKOUT_PATH
declare -a BUILD_SCRIPT
declare -a BRANCH
declare -a BUILD_TARGET
declare -a EMAIL

# Load library functions
. $(dirname $0)/liblog.sh
. $(dirname $0)/libutil.sh
. $(dirname $0)/libini.sh
. $(dirname $0)/libpmrpc.sh
. $(dirname $0)/libqueue.sh
. $(dirname $0)/libevent.sh
. $(dirname $0)/liblist.sh
. $(dirname $0)/libautobuilder.sh

show_usage() {
   cat << __EOF__
   Name:       $(basename $0)
   Desc:       Automates building of project sandboxes for continuous integration
   Usage:      $(basename $0) [options] <cmd>
               -h    print usage information
               -f    configuration file [default: $CONFIG_FILE_PATH]
   Commands:   history [title]            print build history (optionally filter by build title)
               poolinfo                   print information about the build machine pool
               testcandidate [title]      print test candidate information
               scan                       request a scan of the SCM trees to check for code updates
               requestbuild [title] [rev] request a build of revision 'rev' of build 'title'
               run                        run as the master build server
__EOF__
}

parse_configuration() {
   local i=
   local n=0

   # First, extract the global configuration information
   REMOTE_USER=$(ini_get_value $CONFIG_FILE_PATH global remote_username)
   test "x$REMOTE_USER" = "x" && return 1
   dbg "Remote user = $REMOTE_USER"

   WORKDIR=$(ini_get_value $CONFIG_FILE_PATH global working_directory)
   test "x$WORKDIR" = "x" && return 1
   dbg "Working directory = $WORKDIR"

   EMAIL_FROM=$(ini_get_value $CONFIG_FILE_PATH global email_from)
   test "x$EMAIL_FROM" = "x" && return 1
   dbg "Email from = $EMAIL_FROM"

   # Now extract the machines from the machine pool
   for i in $(ini_get_values_in_section $CONFIG_FILE_PATH machine_pool)
   do
      MACHINE_POOL="$MACHINE_POOL $i"
   done
   MACHINE_POOL=$(util_trim_string $MACHINE_POOL)
   test "x$MACHINE_POOL" = "x" && return 1
   dbg "Machine pool = $MACHINE_POOL"

   # Parse the buildspec sections
   for i in $(ini_get_section_list $CONFIG_FILE_PATH)
   do
      # Ignore the global and machine pool sections...
      test "global" = "$i" && continue
      test "machine_pool" = "$i" && continue

      BUILD_TITLE[$n]=$i
      CHECKOUT_METHOD[$n]=$(ini_get_value $CONFIG_FILE_PATH $i checkout_method)
      CHECKOUT_PATH[$n]=$(ini_get_value $CONFIG_FILE_PATH $i checkout_path)
      BUILD_SCRIPT[$n]=$(ini_get_value $CONFIG_FILE_PATH $i build_script)
      BRANCH[$n]=$(ini_get_value $CONFIG_FILE_PATH $i branch)
      BUILD_TARGET[$n]=$(ini_get_value $CONFIG_FILE_PATH $i build_target)
      EMAIL[$n]=$(ini_get_value $CONFIG_FILE_PATH $i email)

      # We must have at least this subset of possible values defined
      test "x${CHECKOUT_METHOD[$n]}" = "x" && return 1
      test "x${CHECKOUT_PATH[$n]}" = "x" && return 1
      test "x${BUILD_SCRIPT[$n]}" = "x" && return 1

      dbg "Adding build ${BUILD_TITLE[$n]}:"
      dbg "    checkout method   = ${CHECKOUT_METHOD[$n]}"
      dbg "    checkout path     = ${CHECKOUT_PATH[$n]}"
      dbg "    build script      = ${BUILD_SCRIPT[$n]}"
      dbg "    branch            = ${BRANCH[$n]}"
      dbg "    build target      = ${BUILD_TARGET[$n]}"
      dbg "    email             = ${EMAIL[$n]}"

      NUMBER_OF_BUILDS=$((NUMBER_OF_BUILDS+1))
      n=$((n+1))
   done
}

# $1 -- build name
get_last_build_revision() {
   if test -f "$LAST_BUILT_LOG"
   then
      grep "$1" $LAST_BUILT_LOG | sed 's/^.*=//g;s/ //g'
   else
      false
   fi
}

# $1 -- report path
# $2 -- email to
# $3 -- email from
# $4 -- subject (summary string)
email_report() {
   test -f "$1" || return 1
   test "x$2" = "x" && return 1
   test "x$3" = "x" && return 1
   test "x$4" = "x" && return 1
   local tmp=$(mktemp)
   local ret=0
   test -f "$tmp" || return 1

   echo "From: $3" > $tmp
   echo "To: $2" >> $tmp
   echo "Reply-To: $3" >> $tmp
   echo "Subject: $4" >> $tmp
   echo >> $tmp
   cat "$1" >> $tmp
   echo >> $tmp
   echo >> $tmp

   msmtp -t --read-envelope-from < $tmp
   ret=$?
   rm $tmp
   return $ret
}

# $1 -- build name
# $2 -- build revision
set_last_build_revision() {
   if test -f "$LAST_BUILT_LOG"
   then
      grep -v "$1" $LAST_BUILT_LOG > ${LAST_BUILT_LOG}.new
   fi
   echo "$1 = $2" >> ${LAST_BUILT_LOG}.new && mv ${LAST_BUILT_LOG}.new ${LAST_BUILT_LOG}
}

# $1 -- checkout path
# $2 -- branch name (optional)
git_get_build_rev() {
	local branch="HEAD"
	test "x$1" = "x" && return 1
	test "x$2" = "x" || branch="refs/heads/$2"
	git ls-remote $1 | awk -v b="$branch" '$2 == b { print $1 }'
}

# $1 -- checkout path
# $2 -- branch name (optional)
svn_get_build_rev() {
	test "x$1" = "x" && return 1
	svn info $1 | awk '/^Revision/ { print $2 }'
}

# $1 -- build id number
get_current_revision() {
   local current_rev=
   test "x$1" = "x" && return 1
   case ${CHECKOUT_METHOD[$1]} in
      git) current_rev="$(git_get_build_rev ${CHECKOUT_PATH[$1]} ${BRANCH[$1]})";;
      svn) current_rev="$(svn_get_build_rev ${CHECKOUT_PATH[$1]} ${BRANCH[$1]})";;
      *) err "Unsupported checkout method ${CHECKOUT_METHOD[$1]}" ;;
   esac
   current_rev=$(util_trim_string "$current_rev")
   test "x$current_rev" = "x" && return 1
   echo $current_rev
}

# $1 -- ip address
get_machine_queue_length() {
   test -n "$1" || return 1
   pmrpc_run_command $REMOTE_USER $1 "$JOBRUNNER_PATH queuelength"
}

# $1 -- ip address
show_machine_queue() {
   test -n "$1" || return 1
   pmrpc_run_command $REMOTE_USER $1 "$JOBRUNNER_PATH show"
}

# $1 -- revision
# $2 -- ip address
# $3 -- build script
# $4 -- report script
push_build_to_runner_machine() {
   local current_rev=
   local runner_ip=
   local build_script=
   local report_script=
   local my_ip=
   local jobcmd=

   test "x$1" = "x" && return 1 || current_rev="$1"
   test "x$2" = "x" && return 1 || runner_ip="$2"
   test "x$3" = "x" && return 1 || build_script="$3"
   test "x$4" = "x" && return 1 || report_script="$4"

   if ! my_ip=$(util_find_interface_on_network "$runner_ip")
   then
      err "Failed to determine which local interface to use for reporting"
      return 1
   fi

   jobcmd="$JOBRUNNER_PATH add $current_rev $my_ip:$build_script $my_ip:$report_script"
   dbg "Asking $REMOTE_USER@$runner_ip to execute job command $jobcmd"
   pmrpc_run_command $REMOTE_USER $runner_ip "$jobcmd"
}

# Select a runner to use
pick_runner_machine() {
   local l=
   local m=
   local minlen=
   local idlemachine=

   # Pick a runner based on who has the shortest queue
   # We randomise the machine pool order to avoid artificially loading
   # the first box in the pool
   for m in $(for i in $MACHINE_POOL; do printf "$RANDOM\t%s\n" $i; done | sort -n | cut -f2-)
   do
      if l=$(get_machine_queue_length "$m")
      then
         dbg "Machine $m has $l jobs queued"
         if test -z "$minlen" || test $l -lt $minlen
         then
            minlen=$l
            idlemachine=$m
         fi
      else
         err "Failed to complete pmrpc request to $m (machine said: $l)"
      fi
   done

   test -n "$idlemachine" || return 1
   echo $idlemachine
}

# Scan VCS trees for updates, queue builds for processing
do_tree_scan() {
   local current_revision=
   local previous_revision=
   local current_rev=
   local runner=

   # Check the tree for each of the builds
   for ((i=0;i<$NUMBER_OF_BUILDS;i++))
   do
      # What is revision is the tree at?
      previous_revision="$(get_last_build_revision ${BUILD_TITLE[$i]})"
      if ! current_revision=$(get_current_revision $i)
      then
         err "Failed to determine tree revision for ${BUILD_TITLE[$i]}"
         continue
      fi

      # Does the tree need building?
      if test "$previous_revision" != "$current_revision"
      then
         local msg=
         test "x$previous_revision" = "x" && msg="never built before" || msg="last build was $previous_revision"
         logts "${BUILD_TITLE[$i]} needs a build ($msg, current rev is $current_revision)"
      else
         dbg "${BUILD_TITLE[$i]} is up to date at revision $current_revision"
         continue
      fi

      # Add the build to the queue for processing
      #if enqueue_build "$i" "$current_revision"
      if autobuilder_enqueue_build "$BUILD_QUEUE" "$i" "$current_revision"
      then
         dbg "Revision $current_revision of ${BUILD_TITLE[$i]} queued for pushing out to the pool"
      else
         err "Failed to enqueue rev. $current_revision of ${BUILD_TITLE[$i]}"
      fi
   done
}

# $1 -- build id
# $2 -- revision
# $3 -- runner
generate_report_script() {
   test "x${1}" = "x" && return 1
   test "x${2}" = "x" && return 1
   test "x${3}" = "x" && return 1
   local script=${WORKDIR}/$(basename $0)-${BUILD_TITLE[$1]}-${2}-${3}-$(date +%s)_REPORT.sh
   cat > $script << __EOF__
#!/bin/bash

# Input arguments: \$1 -- SUCCESS or FAIL; \$2 -- report ip/path string
# This script should be executed on the build master by the build runner machine

# Return result for ${BUILD_TITLE[$1]} rev $2 executed on runner $3
$0 -f ${CONFIG_FILE_PATH} report ${BUILD_TITLE[$1]} ${2} ${3} \$1 \$2
__EOF__
   test -f "$script" && chmod +x "$script" && echo "$script"
}

# $1 -- build id
# $2 -- revision
# $3 -- runner
generate_build_script() {
   test "x${1}" = "x" && return 1
   test "x${2}" = "x" && return 1
   test "x${3}" = "x" && return 1
   local script=${WORKDIR}/$(basename $0)-${BUILD_TITLE[$1]}-${2}-${3}-$(date +%s)_BUILD.sh
   cat > $script << __EOF__
#!/bin/bash

# This script should be executed on the build runner.  It is autogenerated
# from ${BUILD_SCRIPT[$1]} with some variables added by $(basename $0).

# These variables are provided by $(basename $0)
BABS_BUILD_TITLE=${BUILD_TITLE[$1]}
BABS_BRANCH_NAME=${BRANCH[$1]}
BABS_REVISION=$2
BABS_BUILD_TARGET=${BUILD_TARGET[$1]}
BABS_WORKROOT=/$WORKDIR/${BUILD_TITLE[$1]}/build-${2}-$(date +%H-%M-%S_%d.%m.%Y)
BABS_CHECKOUT_LOGFILE=\${BABS_WORKROOT}/checkout-log.txt
BABS_BUILD_LOGFILE=\${BABS_WORKROOT}/build-log.txt
BABS_START_TIME=\$(date)

# These functions are provided by $(basename $0)
$(grep -v "^#\!" $(dirname $0)/libreport.sh)

die() { report_generate "\$@"; exit 1; }

# Ensure workroot can be created
test -d "\$BABS_WORKROOT"  && die "\$BABS_WORKROOT already exists"
mkdir -p "\$BABS_WORKROOT" || die "Failed to create \$BABS_WORKROOT"
cd "\$BABS_WORKROOT"

# The rest of this script is pasted from ${BUILD_SCRIPT[$1]}
$(grep -v "^#\!" ${BUILD_SCRIPT[$1]})

# Generate a report if the build script didn't
test $? -eq 0 && report_generate "Success" || report_generate "Failed"
__EOF__
   test -f "$script" && chmod +x "$script" && echo "$script"
}

# Pass each entry in the build queue out to the machine pool for execution
process_build_queue() {
   local runner=
   local build_id=
   local build_rev=
   local build_script=
   local report_script=
   local ret=0

   while true
   do
      # If we fail to dequeue a build we're at the end of the queue...
      autobuilder_dequeue_build "$BUILD_QUEUE" || break

      # Select which machine in the pool should execute the build
      if ! runner=$(pick_runner_machine)
      then
         err "Failed to select machine to run ${BUILD_TITLE[$build_id]} revision $build_rev"
         ret=$((ret+1))
         continue
      fi

      # Generate a build script for the runner
      if ! build_script=$(generate_build_script $build_id $build_rev $runner)
      then
         err "Failed to generate build script for ${BUILD_TITLE[$build_id]} revision $build_rev"
         ret=$((ret+1))
         continue
      fi

      # Generate a report script for the runner
      if ! report_script=$(generate_report_script $build_id $build_rev $runner)
      then
         err "Failed to generate reporting script for ${BUILD_TITLE[$build_id]} revision $build_rev"
         ret=$((ret+1))
         continue
      fi

      # Push the build out
      if push_build_to_runner_machine "$build_rev" $runner "$build_script" "$report_script"
      then
         logts "${BUILD_TITLE[$build_id]} revision $build_rev to be processed by runner $runner"
         set_last_build_revision "${BUILD_TITLE[$build_id]}" "$build_rev"
         autobuilder_add_inflight_build "$IN_FLIGHT_LOG" "${BUILD_TITLE[$build_id]}" "$build_rev" "$runner"
      else
         err "Failed to push ${BUILD_TITLE[$build_id]} revision $build_rev build to runner $runner"
         ret=$((ret+1))
         continue
      fi
   done
   dbg "Finished processing build queue"
   return $ret
}

process_report_queue() {
   local ret=0
   local build_title=
   local build_rev=
   local build_runner_ip=
   local build_result=
   local build_report_path=
   local build_date=
   local email=
   local n=
   local local_build_report_path=

   while true
   do
      # Emtpy queue means we've nothing more to process
      autobuilder_dequeue_report "$REPORT_QUEUE" || break

      logts "Runner $build_runner_ip reported $build_result for $build_title revision $build_rev"

      # Find this build in our "in flight" build list
      if ! autobuilder_rem_inflight_build "$IN_FLIGHT_LOG" "$build_rev" "$build_title"
      then
         err "Couldn't locate build on inflight list -- reports will be dropped :-("
         ret=$((ret+1))
         continue
      fi

      # Place the build in the history log
      local bruntime=$(( $(date +%s) - $(date -d "$build_date" +%s) ))

      # FIXME: don't guess about the script name :-(
      local bpath=$(grep ^BABS_WORKROOT ${WORKDIR}/$(basename $0)-${build_title}-${build_rev}-${build_runner_ip}*BUILD.sh | cut -d"=" -f2)

      if ! autobuilder_add_build_to_history "$BUILD_HISTORY" "$(date)" "$build_title" "$build_rev" "$build_runner_ip"  "$bpath" "$build_result" "$bruntime"
      then
         err "Failed to store build in the history log, history will be inaccurate"
         ret=$((ret+1))
      fi

      # Obtain report from jobrunner
      local_build_report_path=$REPORT_STORE/${build_title}_${build_rev}_report.txt
      if pmrpc_pull_remote_file $REMOTE_USER $build_runner_ip $build_report_path $local_build_report_path > /dev/null
      then
         # Figure out email distribution from build title
         for ((n=0;n<$NUMBER_OF_BUILDS;n++))
         do
            test "${BUILD_TITLE[$n]}" = "$build_title" && break
         done

         email=$(util_trim_string ${EMAIL[$n]})

         # Email job report
         if test -n "$email"
         then
            if ! email_report "$local_build_report_path" "$email" "$EMAIL_FROM" "Autobuilder: $build_title revision $build_rev : $build_result"
            then
               err "Failed to mail report"
               ret=$((ret+1))
            fi
         fi

         # Tidy up report on jobrunner
         pmrpc_run_command ${REMOTE_USER} $build_runner_ip  "rm $build_report_path" > /dev/null

      else
         err "Failed to copy build report from the runner"
         ret=$((ret+1))
      fi

      # Tidy up build/report scripts
      # FIXME: don't guess about the script names...
      rm -f ${WORKDIR}/$(basename $0)-${build_title}-${build_rev}-${build_runner_ip}*REPORT.sh
      rm -f ${WORKDIR}/$(basename $0)-${build_title}-${build_rev}-${build_runner_ip}*BUILD.sh

   done
   dbg "Finished processing report queue"
   return $ret
}

# Add a build result to the reporting queue
report_result() {
   local s=

   # Sanity check
   if ! util_check_abspath_string "$5"
   then
      err "Invalid report path string: $5"
      return 1
   elif ! util_check_dotted_quad "$3"
   then
      err "Invalid runner ip address: $3"
      return 1
   fi

   # Add report into the queue
   if ! autobuilder_enqueue_report "$REPORT_QUEUE" "$1" "$2" "$3" "$4" "$5"
   then
      err "Failed to add report into report queue"
      return 1
   fi

   # Generate a report ready event for the master
   event_write "$EVENT_QUEUE" "$EVENT_ID_BUILD_REPORT_READY"
}

# Add a build request into the build queue
# $1 -- build title
# $2 -- revision
request_build() {
   local build_title="$1"
   local build_rev="$2"
   local i=
   local f=0

   # Sanity check arguments
   if util_string_is_blank "$build_title" || util_string_is_blank "$build_rev"
   then
      err "Missing build specification.  I expect to be passed <build_title> and <build_revision> on the commandline."
      return 1
   fi

   # Check that the build is in the configuration file
   for ((i=0; i<${NUMBER_OF_BUILDS}; i++))
   do
      test "$build_title" = "${BUILD_TITLE[$i]}" && f=1 && break
   done

   if test $f -le 0
   then
      err "Cannot locate build $build_title in configuration file $CONFIG_FILE_PATH"
      err "Rejecting build request"
      return 1
   fi

   # Everything looks OK, so let's schedule it
   if autobuilder_enqueue_build "$BUILD_QUEUE" "$build_title" "$build_rev"
   then
      event_write "$EVENT_QUEUE" "$EVENT_ID_PROCESS_BUILD_QUEUE"
      log "Queued $build_title revision $build_rev successfully"
      return 0
   else
      err "Failed to enqueue $build_title revision $build_rev"
      reutrn 1
   fi
}

# Trigger a revision scan
request_revision_scan() {
   dbg "Request tree scan ($EVENT_QUEUE)"
   event_write "$EVENT_QUEUE" "$EVENT_ID_SCAN_TREE"
   event_write "$EVENT_QUEUE" "$EVENT_ID_PROCESS_BUILD_QUEUE"
}

# Print information about the autobuilder machine pool
request_machine_pool_info() {
   local ip=

   for ip in ${MACHINE_POOL}
   do
      local cores=$(pmrpc_run_command $REMOTE_USER $ip "grep ^processor /proc/cpuinfo  | wc -l")
      local cpu=$(pmrpc_run_command $REMOTE_USER $ip "grep -m1 \"model name\" /proc/cpuinfo | cut -d: -f2")
      local mem=$(pmrpc_run_command $REMOTE_USER $ip "grep ^MemTotal /proc/meminfo")

      cpu=$(util_trim_string "$cpu")
      mem=${mem#*: }
      mem=${mem% kB*}
      mem=$(echo "2 k $mem 1048576 / p" | dc)

      log "Build pool machine $ip ($(util_trim_string "$(pmrpc_run_command $REMOTE_USER $ip "uptime")"))"
      log "  Queue  : $(get_machine_queue_length $ip) builds queued"
      log "  CPU    :" ${cpu}
      log "  Cores  : ${cores}"
      log "  Memory : ${mem} GB"
      log "  Disk   :"
      pmrpc_run_command $REMOTE_USER $ip "df -h"
      log ""

   done
}

# Print build history
request_history() {
   local buildtitle="$1"
   local line=
   local fmt="%-30s %-35s %-10s %-10s %-10s\n"
   local do_print=0

   printf "$fmt" "Date" "Build" "Revision" "Build time" "Result"

   queue_lock "$BUILD_HISTORY"
   while read line
   do
      # FIXME: don't use private list interface!
      local d="$(_get_param_from_line "$line" 1)"
      local t="$(_get_param_from_line "$line" 2)"
      local rev="$(_get_param_from_line "$line" 3)"
      local res="$(_get_param_from_line "$line" 6)"
      local bt="$(_get_param_from_line "$line" 7)"

      if util_string_is_blank "$buildtitle"
      then
         do_print=1
      else
         test "$buildtitle" = "$t" && do_print=1 || do_print=0
      fi

      test $do_print -eq 1 && printf "$fmt" "$d" "$t" "$rev" "$bt" "$res"
   done < $BUILD_HISTORY
   queue_unlock "$BUILD_HISTORY"
}

# Provide information about test candidate
request_test_candidate() {
   local str=""

   util_string_is_blank "$1" && return 1

   queue_lock "$BUILD_HISTORY"
   while read line
   do
      # FIXME: don't use private list interface :-(
      local t=$(_get_param_from_line "$line" 2)
      local ip=$(_get_param_from_line "$line" 4)
      local path=$(_get_param_from_line "$line" 5)
      local res=$(_get_param_from_line "$line" 6)
      if test "$t" = "$1" && test "$res" = "SUCCESS"
      then
         str="$t $ip $path"
      fi
   done < $BUILD_HISTORY
   queue_unlock "$BUILD_HISTORY"

   if util_string_is_blank "$str"
   then
      return 1
   else
      echo "$str"
      return 0
   fi
}

#
# Entry point
#
while getopts $CARGS opt
do
   case $opt in
      h) show_usage; exit 0 ;;
      f) CONFIG_FILE_PATH=$OPTARG ;;
      *) die "Unrecognised option" ;;
   esac
done
shift $((OPTIND-1))

test -f "$CONFIG_FILE_PATH" || die "Configuration file $CONFIG_FILE_PATH not found"

parse_configuration || die "Failed to parse configuration $CONFIG_FILE_PATH"

# Set up paths for workdir files
mkdir -p "${WORKDIR}" || die "Failed to create working directory ${WORKDIR}"
REPORT_STORE="${WORKDIR}/${REPORT_STORE}"
mkdir -p "${REPORT_STORE}" || die "Failed to create report store ${REPORT_STORE}"
LAST_BUILT_LOG="${WORKDIR}/${LAST_BUILT_LOG}"
IN_FLIGHT_LOG="${WORKDIR}/${IN_FLIGHT_LOG}"
EVENT_QUEUE="${WORKDIR}/${EVENT_QUEUE}"
BUILD_QUEUE="${WORKDIR}/${BUILD_QUEUE}"
REPORT_QUEUE="${WORKDIR}/${REPORT_QUEUE}"
BUILD_HISTORY="${WORKDIR}/${BUILD_HISTORY}"

case $1 in
   # Don't call this directly -- it's for the jobrunner to report results...
   report) shift; report_result $@ ;;

   # Commands that a human might call
   history) shift; request_history $@ ;;
   poolinfo) request_machine_pool_info ;;
   testcandidate) shift; request_test_candidate $@ ;;
   scan) request_revision_scan ;;
   requestbuild) shift; request_build "$@" ;;
   run)
      # Ensure we clean up after ourselves...
      trap "rm -f $BUILD_QUEUE $EVENT_QUEUE $REPORT_QUEUE" EXIT

      # Event loop
      while true
      do
         # Wait for an input event
         if event=$(event_blocking_read $EVENT_QUEUE)
         then
            dbg "New event: $event"
            case $event in
               $EVENT_ID_SCAN_TREE)
                  do_tree_scan
               ;;
               $EVENT_ID_BUILD_REPORT_READY)
                  if ! process_report_queue
                  then
                     err "Errors processing the report queue -- some reports may be dropped :-("
                  fi
               ;;
               $EVENT_ID_PROCESS_BUILD_QUEUE)
                  if ! process_build_queue
                  then
                     err "Errors processing the build queue -- some builds may be dropped :-("
                  fi
               ;;
               *) err "Unrecognised input event \"$event\"" ;;
            esac
         fi
      done
   ;;
   *) die "Unrecognised command $1" ;;
esac
